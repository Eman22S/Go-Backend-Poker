// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SngClient is the client API for Sng service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SngClient interface {
	// rpc getAllUiSettings(UiSettingsRequest) returns (UiSettingsResponse) {}
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TableState, error)
}

type sngClient struct {
	cc grpc.ClientConnInterface
}

func NewSngClient(cc grpc.ClientConnInterface) SngClient {
	return &sngClient{cc}
}

func (c *sngClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TableState, error) {
	out := new(TableState)
	err := c.cc.Invoke(ctx, "/services.Sng/getStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SngServer is the server API for Sng service.
// All implementations must embed UnimplementedSngServer
// for forward compatibility
type SngServer interface {
	// rpc getAllUiSettings(UiSettingsRequest) returns (UiSettingsResponse) {}
	GetStatus(context.Context, *emptypb.Empty) (*TableState, error)
	mustEmbedUnimplementedSngServer()
}

// UnimplementedSngServer must be embedded to have forward compatible implementations.
type UnimplementedSngServer struct {
}

func (UnimplementedSngServer) GetStatus(context.Context, *emptypb.Empty) (*TableState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSngServer) mustEmbedUnimplementedSngServer() {}

// UnsafeSngServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SngServer will
// result in compilation errors.
type UnsafeSngServer interface {
	mustEmbedUnimplementedSngServer()
}

func RegisterSngServer(s grpc.ServiceRegistrar, srv SngServer) {
	s.RegisterService(&Sng_ServiceDesc, srv)
}

func _Sng_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SngServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Sng/getStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SngServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Sng_ServiceDesc is the grpc.ServiceDesc for Sng service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sng_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.Sng",
	HandlerType: (*SngServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getStatus",
			Handler:    _Sng_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/services.proto",
}
