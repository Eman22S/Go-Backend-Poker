// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: services/services.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UiSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UiSettingsRequest) Reset() {
	*x = UiSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiSettingsRequest) ProtoMessage() {}

func (x *UiSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiSettingsRequest.ProtoReflect.Descriptor instead.
func (*UiSettingsRequest) Descriptor() ([]byte, []int) {
	return file_services_services_proto_rawDescGZIP(), []int{0}
}

func (x *UiSettingsRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type AllUiSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonEncodedData string `protobuf:"bytes,1,opt,name=json_encoded_data,json=jsonEncodedData,proto3" json:"json_encoded_data,omitempty"`
}

func (x *AllUiSettingsRequest) Reset() {
	*x = AllUiSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUiSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUiSettingsRequest) ProtoMessage() {}

func (x *AllUiSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUiSettingsRequest.ProtoReflect.Descriptor instead.
func (*AllUiSettingsRequest) Descriptor() ([]byte, []int) {
	return file_services_services_proto_rawDescGZIP(), []int{1}
}

func (x *AllUiSettingsRequest) GetJsonEncodedData() string {
	if x != nil {
		return x.JsonEncodedData
	}
	return ""
}

type UiSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UiSettingsResponse) Reset() {
	*x = UiSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UiSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UiSettingsResponse) ProtoMessage() {}

func (x *UiSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UiSettingsResponse.ProtoReflect.Descriptor instead.
func (*UiSettingsResponse) Descriptor() ([]byte, []int) {
	return file_services_services_proto_rawDescGZIP(), []int{2}
}

func (x *UiSettingsResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// represents blind level and its value
type BlindLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BlindLevel) Reset() {
	*x = BlindLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlindLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlindLevel) ProtoMessage() {}

func (x *BlindLevel) ProtoReflect() protoreflect.Message {
	mi := &file_services_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlindLevel.ProtoReflect.Descriptor instead.
func (*BlindLevel) Descriptor() ([]byte, []int) {
	return file_services_services_proto_rawDescGZIP(), []int{3}
}

func (x *BlindLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BlindLevel) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GameMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dynamic fields
	ServerTime       int64 `protobuf:"varint,1,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	IsHandInProgress bool  `protobuf:"varint,2,opt,name=is_hand_in_progress,json=isHandInProgress,proto3" json:"is_hand_in_progress,omitempty"`
	// static fields per table
	IsTournament            bool    `protobuf:"varint,3,opt,name=is_tournament,json=isTournament,proto3" json:"is_tournament,omitempty"`
	TableType               string  `protobuf:"bytes,4,opt,name=table_type,json=tableType,proto3" json:"table_type,omitempty"` // texas_holdem | omaha | five_card_draw | five_card_stud
	TournamentInstanceId    int64   `protobuf:"varint,5,opt,name=tournament_instance_id,json=tournamentInstanceId,proto3" json:"tournament_instance_id,omitempty"`
	TableInstanceId         int64   `protobuf:"varint,6,opt,name=table_instance_id,json=tableInstanceId,proto3" json:"table_instance_id,omitempty"`
	GameplayHistoryId       int64   `protobuf:"varint,7,opt,name=gameplay_history_id,json=gameplayHistoryId,proto3" json:"gameplay_history_id,omitempty"`
	Timer                   int32   `protobuf:"varint,8,opt,name=timer,proto3" json:"timer,omitempty"`
	MaxNumPlayers           int32   `protobuf:"varint,9,opt,name=max_num_players,json=maxNumPlayers,proto3" json:"max_num_players,omitempty"`
	MinBuyin                float32 `protobuf:"fixed32,10,opt,name=min_buyin,json=minBuyin,proto3" json:"min_buyin,omitempty"`
	MaxBuyin                float32 `protobuf:"fixed32,11,opt,name=max_buyin,json=maxBuyin,proto3" json:"max_buyin,omitempty"`
	IsForMoney              bool    `protobuf:"varint,12,opt,name=is_for_money,json=isForMoney,proto3" json:"is_for_money,omitempty"`
	MaxNumRaises            int32   `protobuf:"varint,13,opt,name=max_num_raises,json=maxNumRaises,proto3" json:"max_num_raises,omitempty"`
	UseDecimals             bool    `protobuf:"varint,14,opt,name=use_decimals,json=useDecimals,proto3" json:"use_decimals,omitempty"`
	IsRandomSeatingRequired bool    `protobuf:"varint,15,opt,name=is_random_seating_required,json=isRandomSeatingRequired,proto3" json:"is_random_seating_required,omitempty"`
	// fields from extended implementation
	IsFlashMode               bool          `protobuf:"varint,16,opt,name=is_flash_mode,json=isFlashMode,proto3" json:"is_flash_mode,omitempty"`
	IsSingleHand              bool          `protobuf:"varint,17,opt,name=is_single_hand,json=isSingleHand,proto3" json:"is_single_hand,omitempty"`
	IsTurboMode               bool          `protobuf:"varint,18,opt,name=is_turbo_mode,json=isTurboMode,proto3" json:"is_turbo_mode,omitempty"`
	HasAdditionalPayout       bool          `protobuf:"varint,19,opt,name=has_additional_payout,json=hasAdditionalPayout,proto3" json:"has_additional_payout,omitempty"`
	BlindLevelAndValues       []*BlindLevel `protobuf:"bytes,20,rep,name=blind_level_and_values,json=blindLevelAndValues,proto3" json:"blind_level_and_values,omitempty"`
	FlashPrizePoolValues      *anypb.Any    `protobuf:"bytes,21,opt,name=flash_prize_pool_values,json=flashPrizePoolValues,proto3" json:"flash_prize_pool_values,omitempty"`
	AdditionalPrizePoolPayout *anypb.Any    `protobuf:"bytes,22,opt,name=additional_prize_pool_payout,json=additionalPrizePoolPayout,proto3" json:"additional_prize_pool_payout,omitempty"`
	FlashModeStatus           bool          `protobuf:"varint,23,opt,name=flash_mode_status,json=flashModeStatus,proto3" json:"flash_mode_status,omitempty"`
	UseAdditionalPayoutOnly   bool          `protobuf:"varint,24,opt,name=use_additional_payout_only,json=useAdditionalPayoutOnly,proto3" json:"use_additional_payout_only,omitempty"`
	UniqueDeck                *anypb.Any    `protobuf:"bytes,25,opt,name=unique_deck,json=uniqueDeck,proto3" json:"unique_deck,omitempty"`
	InstantPayout             *anypb.Any    `protobuf:"bytes,26,opt,name=instant_payout,json=instantPayout,proto3" json:"instant_payout,omitempty"`
	TournamentImage           string        `protobuf:"bytes,27,opt,name=tournament_image,json=tournamentImage,proto3" json:"tournament_image,omitempty"`
	AddonChips                float32       `protobuf:"fixed32,28,opt,name=addon_chips,json=addonChips,proto3" json:"addon_chips,omitempty"`
	WildcardsEnabled          bool          `protobuf:"varint,29,opt,name=wildcards_enabled,json=wildcardsEnabled,proto3" json:"wildcards_enabled,omitempty"`
	WildcardValue             *anypb.Any    `protobuf:"bytes,30,opt,name=wildcard_value,json=wildcardValue,proto3" json:"wildcard_value,omitempty"`
	ChipsInPenny              bool          `protobuf:"varint,31,opt,name=chips_in_penny,json=chipsInPenny,proto3" json:"chips_in_penny,omitempty"`
	PairMixedAddonPlayers     *anypb.Any    `protobuf:"bytes,32,opt,name=pair_mixed_addon_players,json=pairMixedAddonPlayers,proto3" json:"pair_mixed_addon_players,omitempty"`
	HardCapEnabled            bool          `protobuf:"varint,33,opt,name=hard_cap_enabled,json=hardCapEnabled,proto3" json:"hard_cap_enabled,omitempty"`
	UsernamePrivacy           bool          `protobuf:"varint,34,opt,name=username_privacy,json=usernamePrivacy,proto3" json:"username_privacy,omitempty"`
	RevealCardsAfterAction    bool          `protobuf:"varint,35,opt,name=reveal_cards_after_action,json=revealCardsAfterAction,proto3" json:"reveal_cards_after_action,omitempty"`
	CardsRound                int32         `protobuf:"varint,36,opt,name=cards_round,json=cardsRound,proto3" json:"cards_round,omitempty"`
	BringIn                   bool          `protobuf:"varint,37,opt,name=bring_in,json=bringIn,proto3" json:"bring_in,omitempty"`
	BringInValue              float32       `protobuf:"fixed32,38,opt,name=bring_in_value,json=bringInValue,proto3" json:"bring_in_value,omitempty"`
}

func (x *GameMeta) Reset() {
	*x = GameMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMeta) ProtoMessage() {}

func (x *GameMeta) ProtoReflect() protoreflect.Message {
	mi := &file_services_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMeta.ProtoReflect.Descriptor instead.
func (*GameMeta) Descriptor() ([]byte, []int) {
	return file_services_services_proto_rawDescGZIP(), []int{4}
}

func (x *GameMeta) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *GameMeta) GetIsHandInProgress() bool {
	if x != nil {
		return x.IsHandInProgress
	}
	return false
}

func (x *GameMeta) GetIsTournament() bool {
	if x != nil {
		return x.IsTournament
	}
	return false
}

func (x *GameMeta) GetTableType() string {
	if x != nil {
		return x.TableType
	}
	return ""
}

func (x *GameMeta) GetTournamentInstanceId() int64 {
	if x != nil {
		return x.TournamentInstanceId
	}
	return 0
}

func (x *GameMeta) GetTableInstanceId() int64 {
	if x != nil {
		return x.TableInstanceId
	}
	return 0
}

func (x *GameMeta) GetGameplayHistoryId() int64 {
	if x != nil {
		return x.GameplayHistoryId
	}
	return 0
}

func (x *GameMeta) GetTimer() int32 {
	if x != nil {
		return x.Timer
	}
	return 0
}

func (x *GameMeta) GetMaxNumPlayers() int32 {
	if x != nil {
		return x.MaxNumPlayers
	}
	return 0
}

func (x *GameMeta) GetMinBuyin() float32 {
	if x != nil {
		return x.MinBuyin
	}
	return 0
}

func (x *GameMeta) GetMaxBuyin() float32 {
	if x != nil {
		return x.MaxBuyin
	}
	return 0
}

func (x *GameMeta) GetIsForMoney() bool {
	if x != nil {
		return x.IsForMoney
	}
	return false
}

func (x *GameMeta) GetMaxNumRaises() int32 {
	if x != nil {
		return x.MaxNumRaises
	}
	return 0
}

func (x *GameMeta) GetUseDecimals() bool {
	if x != nil {
		return x.UseDecimals
	}
	return false
}

func (x *GameMeta) GetIsRandomSeatingRequired() bool {
	if x != nil {
		return x.IsRandomSeatingRequired
	}
	return false
}

func (x *GameMeta) GetIsFlashMode() bool {
	if x != nil {
		return x.IsFlashMode
	}
	return false
}

func (x *GameMeta) GetIsSingleHand() bool {
	if x != nil {
		return x.IsSingleHand
	}
	return false
}

func (x *GameMeta) GetIsTurboMode() bool {
	if x != nil {
		return x.IsTurboMode
	}
	return false
}

func (x *GameMeta) GetHasAdditionalPayout() bool {
	if x != nil {
		return x.HasAdditionalPayout
	}
	return false
}

func (x *GameMeta) GetBlindLevelAndValues() []*BlindLevel {
	if x != nil {
		return x.BlindLevelAndValues
	}
	return nil
}

func (x *GameMeta) GetFlashPrizePoolValues() *anypb.Any {
	if x != nil {
		return x.FlashPrizePoolValues
	}
	return nil
}

func (x *GameMeta) GetAdditionalPrizePoolPayout() *anypb.Any {
	if x != nil {
		return x.AdditionalPrizePoolPayout
	}
	return nil
}

func (x *GameMeta) GetFlashModeStatus() bool {
	if x != nil {
		return x.FlashModeStatus
	}
	return false
}

func (x *GameMeta) GetUseAdditionalPayoutOnly() bool {
	if x != nil {
		return x.UseAdditionalPayoutOnly
	}
	return false
}

func (x *GameMeta) GetUniqueDeck() *anypb.Any {
	if x != nil {
		return x.UniqueDeck
	}
	return nil
}

func (x *GameMeta) GetInstantPayout() *anypb.Any {
	if x != nil {
		return x.InstantPayout
	}
	return nil
}

func (x *GameMeta) GetTournamentImage() string {
	if x != nil {
		return x.TournamentImage
	}
	return ""
}

func (x *GameMeta) GetAddonChips() float32 {
	if x != nil {
		return x.AddonChips
	}
	return 0
}

func (x *GameMeta) GetWildcardsEnabled() bool {
	if x != nil {
		return x.WildcardsEnabled
	}
	return false
}

func (x *GameMeta) GetWildcardValue() *anypb.Any {
	if x != nil {
		return x.WildcardValue
	}
	return nil
}

func (x *GameMeta) GetChipsInPenny() bool {
	if x != nil {
		return x.ChipsInPenny
	}
	return false
}

func (x *GameMeta) GetPairMixedAddonPlayers() *anypb.Any {
	if x != nil {
		return x.PairMixedAddonPlayers
	}
	return nil
}

func (x *GameMeta) GetHardCapEnabled() bool {
	if x != nil {
		return x.HardCapEnabled
	}
	return false
}

func (x *GameMeta) GetUsernamePrivacy() bool {
	if x != nil {
		return x.UsernamePrivacy
	}
	return false
}

func (x *GameMeta) GetRevealCardsAfterAction() bool {
	if x != nil {
		return x.RevealCardsAfterAction
	}
	return false
}

func (x *GameMeta) GetCardsRound() int32 {
	if x != nil {
		return x.CardsRound
	}
	return 0
}

func (x *GameMeta) GetBringIn() bool {
	if x != nil {
		return x.BringIn
	}
	return false
}

func (x *GameMeta) GetBringInValue() float32 {
	if x != nil {
		return x.BringInValue
	}
	return 0
}

type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rake                          float32    `protobuf:"fixed32,1,opt,name=rake,proto3" json:"rake,omitempty"`
	TableAction                   string     `protobuf:"bytes,2,opt,name=table_action,json=tableAction,proto3" json:"table_action,omitempty"`
	LastPlayerKeyToMakeValidRaise string     `protobuf:"bytes,3,opt,name=last_player_key_to_make_valid_raise,json=lastPlayerKeyToMakeValidRaise,proto3" json:"last_player_key_to_make_valid_raise,omitempty"`
	LastValidRaise                float32    `protobuf:"fixed32,4,opt,name=last_valid_raise,json=lastValidRaise,proto3" json:"last_valid_raise,omitempty"`
	CurRaise                      float32    `protobuf:"fixed32,5,opt,name=cur_raise,json=curRaise,proto3" json:"cur_raise,omitempty"`
	Bigblind                      string     `protobuf:"bytes,6,opt,name=bigblind,proto3" json:"bigblind,omitempty"`
	Smallblind                    string     `protobuf:"bytes,7,opt,name=smallblind,proto3" json:"smallblind,omitempty"`
	GameTurn                      int32      `protobuf:"varint,8,opt,name=game_turn,json=gameTurn,proto3" json:"game_turn,omitempty"`
	Round                         int32      `protobuf:"varint,9,opt,name=round,proto3" json:"round,omitempty"`
	Flop                          *anypb.Any `protobuf:"bytes,10,opt,name=flop,proto3" json:"flop,omitempty"`
	Turn                          *anypb.Any `protobuf:"bytes,11,opt,name=turn,proto3" json:"turn,omitempty"`
	River                         *anypb.Any `protobuf:"bytes,12,opt,name=river,proto3" json:"river,omitempty"`
	IsAllin                       bool       `protobuf:"varint,13,opt,name=is_allin,json=isAllin,proto3" json:"is_allin,omitempty"`
	WinnersDta                    *anypb.Any `protobuf:"bytes,14,opt,name=winners_dta,json=winnersDta,proto3" json:"winners_dta,omitempty"`
	Pot                           *anypb.Any `protobuf:"bytes,15,opt,name=pot,proto3" json:"pot,omitempty"`
	Bet                           *anypb.Any `protobuf:"bytes,16,opt,name=bet,proto3" json:"bet,omitempty"`
	SbPlayerKey                   string     `protobuf:"bytes,17,opt,name=sb_player_key,json=sbPlayerKey,proto3" json:"sb_player_key,omitempty"`
	BbPlayerKey                   string     `protobuf:"bytes,18,opt,name=bb_player_key,json=bbPlayerKey,proto3" json:"bb_player_key,omitempty"`
	BlindsAnnounce                bool       `protobuf:"varint,19,opt,name=blinds_announce,json=blindsAnnounce,proto3" json:"blinds_announce,omitempty"`
	TablePausedHtml               bool       `protobuf:"varint,20,opt,name=table_paused_html,json=tablePausedHtml,proto3" json:"table_paused_html,omitempty"`
	// fields from extended implementation
	BlindLevelAndValues         []*BlindLevel `protobuf:"bytes,21,rep,name=blind_level_and_values,json=blindLevelAndValues,proto3" json:"blind_level_and_values,omitempty"`
	FlashPrizePoolValues        *anypb.Any    `protobuf:"bytes,22,opt,name=flash_prize_pool_values,json=flashPrizePoolValues,proto3" json:"flash_prize_pool_values,omitempty"`
	AdditionalPrizePoolPayout   *anypb.Any    `protobuf:"bytes,23,opt,name=additional_prize_pool_payout,json=additionalPrizePoolPayout,proto3" json:"additional_prize_pool_payout,omitempty"`
	AdditionalPrizePoolPayoutId int64         `protobuf:"varint,24,opt,name=additional_prize_pool_payout_id,json=additionalPrizePoolPayoutId,proto3" json:"additional_prize_pool_payout_id,omitempty"`
	AdditionalPayoutId          int64         `protobuf:"varint,25,opt,name=additional_payout_id,json=additionalPayoutId,proto3" json:"additional_payout_id,omitempty"`
	AdditionalPayoutHand        *anypb.Any    `protobuf:"bytes,26,opt,name=additional_payout_hand,json=additionalPayoutHand,proto3" json:"additional_payout_hand,omitempty"`
	AdditionalPayoutMadeTo      *anypb.Any    `protobuf:"bytes,27,opt,name=additional_payout_made_to,json=additionalPayoutMadeTo,proto3" json:"additional_payout_made_to,omitempty"`
	TounramentBatchInfo         *anypb.Any    `protobuf:"bytes,28,opt,name=tounrament_batch_info,json=tounramentBatchInfo,proto3" json:"tounrament_batch_info,omitempty"`
	AddonsUsed                  bool          `protobuf:"varint,29,opt,name=addons_used,json=addonsUsed,proto3" json:"addons_used,omitempty"`
	PrizePoolPayoutId           int64         `protobuf:"varint,30,opt,name=prize_pool_payout_id,json=prizePoolPayoutId,proto3" json:"prize_pool_payout_id,omitempty"`
	UseAdditionalPayoutOnly     bool          `protobuf:"varint,31,opt,name=use_additional_payout_only,json=useAdditionalPayoutOnly,proto3" json:"use_additional_payout_only,omitempty"`
	FlashModeStatus             bool          `protobuf:"varint,32,opt,name=flash_mode_status,json=flashModeStatus,proto3" json:"flash_mode_status,omitempty"`
	FlashModeTimer              int64         `protobuf:"varint,33,opt,name=flash_mode_timer,json=flashModeTimer,proto3" json:"flash_mode_timer,omitempty"`
	UniqueDeck                  *anypb.Any    `protobuf:"bytes,34,opt,name=unique_deck,json=uniqueDeck,proto3" json:"unique_deck,omitempty"`
	InstantPayout               *anypb.Any    `protobuf:"bytes,35,opt,name=instant_payout,json=instantPayout,proto3" json:"instant_payout,omitempty"`
	TournamentImage             string        `protobuf:"bytes,36,opt,name=tournament_image,json=tournamentImage,proto3" json:"tournament_image,omitempty"`
	AddonChips                  float32       `protobuf:"fixed32,37,opt,name=addon_chips,json=addonChips,proto3" json:"addon_chips,omitempty"`
	WildcardsEnabled            bool          `protobuf:"varint,38,opt,name=wildcards_enabled,json=wildcardsEnabled,proto3" json:"wildcards_enabled,omitempty"`
	WildcardValue               *anypb.Any    `protobuf:"bytes,39,opt,name=wildcard_value,json=wildcardValue,proto3" json:"wildcard_value,omitempty"`
	ChipsInPenny                bool          `protobuf:"varint,40,opt,name=chips_in_penny,json=chipsInPenny,proto3" json:"chips_in_penny,omitempty"`
	PairMixedAddonPlayers       *anypb.Any    `protobuf:"bytes,41,opt,name=pair_mixed_addon_players,json=pairMixedAddonPlayers,proto3" json:"pair_mixed_addon_players,omitempty"`
	HardCapEnabled              bool          `protobuf:"varint,42,opt,name=hard_cap_enabled,json=hardCapEnabled,proto3" json:"hard_cap_enabled,omitempty"`
	UsernamePrivacy             bool          `protobuf:"varint,43,opt,name=username_privacy,json=usernamePrivacy,proto3" json:"username_privacy,omitempty"`
	RevealCardsAfterAction      bool          `protobuf:"varint,44,opt,name=reveal_cards_after_action,json=revealCardsAfterAction,proto3" json:"reveal_cards_after_action,omitempty"`
	CardsRound                  int32         `protobuf:"varint,45,opt,name=cards_round,json=cardsRound,proto3" json:"cards_round,omitempty"`
	BringIn                     bool          `protobuf:"varint,46,opt,name=bring_in,json=bringIn,proto3" json:"bring_in,omitempty"`
	BringInValue                float32       `protobuf:"fixed32,47,opt,name=bring_in_value,json=bringInValue,proto3" json:"bring_in_value,omitempty"`
}

func (x *Game) Reset() {
	*x = Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_services_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_services_services_proto_rawDescGZIP(), []int{5}
}

func (x *Game) GetRake() float32 {
	if x != nil {
		return x.Rake
	}
	return 0
}

func (x *Game) GetTableAction() string {
	if x != nil {
		return x.TableAction
	}
	return ""
}

func (x *Game) GetLastPlayerKeyToMakeValidRaise() string {
	if x != nil {
		return x.LastPlayerKeyToMakeValidRaise
	}
	return ""
}

func (x *Game) GetLastValidRaise() float32 {
	if x != nil {
		return x.LastValidRaise
	}
	return 0
}

func (x *Game) GetCurRaise() float32 {
	if x != nil {
		return x.CurRaise
	}
	return 0
}

func (x *Game) GetBigblind() string {
	if x != nil {
		return x.Bigblind
	}
	return ""
}

func (x *Game) GetSmallblind() string {
	if x != nil {
		return x.Smallblind
	}
	return ""
}

func (x *Game) GetGameTurn() int32 {
	if x != nil {
		return x.GameTurn
	}
	return 0
}

func (x *Game) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Game) GetFlop() *anypb.Any {
	if x != nil {
		return x.Flop
	}
	return nil
}

func (x *Game) GetTurn() *anypb.Any {
	if x != nil {
		return x.Turn
	}
	return nil
}

func (x *Game) GetRiver() *anypb.Any {
	if x != nil {
		return x.River
	}
	return nil
}

func (x *Game) GetIsAllin() bool {
	if x != nil {
		return x.IsAllin
	}
	return false
}

func (x *Game) GetWinnersDta() *anypb.Any {
	if x != nil {
		return x.WinnersDta
	}
	return nil
}

func (x *Game) GetPot() *anypb.Any {
	if x != nil {
		return x.Pot
	}
	return nil
}

func (x *Game) GetBet() *anypb.Any {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *Game) GetSbPlayerKey() string {
	if x != nil {
		return x.SbPlayerKey
	}
	return ""
}

func (x *Game) GetBbPlayerKey() string {
	if x != nil {
		return x.BbPlayerKey
	}
	return ""
}

func (x *Game) GetBlindsAnnounce() bool {
	if x != nil {
		return x.BlindsAnnounce
	}
	return false
}

func (x *Game) GetTablePausedHtml() bool {
	if x != nil {
		return x.TablePausedHtml
	}
	return false
}

func (x *Game) GetBlindLevelAndValues() []*BlindLevel {
	if x != nil {
		return x.BlindLevelAndValues
	}
	return nil
}

func (x *Game) GetFlashPrizePoolValues() *anypb.Any {
	if x != nil {
		return x.FlashPrizePoolValues
	}
	return nil
}

func (x *Game) GetAdditionalPrizePoolPayout() *anypb.Any {
	if x != nil {
		return x.AdditionalPrizePoolPayout
	}
	return nil
}

func (x *Game) GetAdditionalPrizePoolPayoutId() int64 {
	if x != nil {
		return x.AdditionalPrizePoolPayoutId
	}
	return 0
}

func (x *Game) GetAdditionalPayoutId() int64 {
	if x != nil {
		return x.AdditionalPayoutId
	}
	return 0
}

func (x *Game) GetAdditionalPayoutHand() *anypb.Any {
	if x != nil {
		return x.AdditionalPayoutHand
	}
	return nil
}

func (x *Game) GetAdditionalPayoutMadeTo() *anypb.Any {
	if x != nil {
		return x.AdditionalPayoutMadeTo
	}
	return nil
}

func (x *Game) GetTounramentBatchInfo() *anypb.Any {
	if x != nil {
		return x.TounramentBatchInfo
	}
	return nil
}

func (x *Game) GetAddonsUsed() bool {
	if x != nil {
		return x.AddonsUsed
	}
	return false
}

func (x *Game) GetPrizePoolPayoutId() int64 {
	if x != nil {
		return x.PrizePoolPayoutId
	}
	return 0
}

func (x *Game) GetUseAdditionalPayoutOnly() bool {
	if x != nil {
		return x.UseAdditionalPayoutOnly
	}
	return false
}

func (x *Game) GetFlashModeStatus() bool {
	if x != nil {
		return x.FlashModeStatus
	}
	return false
}

func (x *Game) GetFlashModeTimer() int64 {
	if x != nil {
		return x.FlashModeTimer
	}
	return 0
}

func (x *Game) GetUniqueDeck() *anypb.Any {
	if x != nil {
		return x.UniqueDeck
	}
	return nil
}

func (x *Game) GetInstantPayout() *anypb.Any {
	if x != nil {
		return x.InstantPayout
	}
	return nil
}

func (x *Game) GetTournamentImage() string {
	if x != nil {
		return x.TournamentImage
	}
	return ""
}

func (x *Game) GetAddonChips() float32 {
	if x != nil {
		return x.AddonChips
	}
	return 0
}

func (x *Game) GetWildcardsEnabled() bool {
	if x != nil {
		return x.WildcardsEnabled
	}
	return false
}

func (x *Game) GetWildcardValue() *anypb.Any {
	if x != nil {
		return x.WildcardValue
	}
	return nil
}

func (x *Game) GetChipsInPenny() bool {
	if x != nil {
		return x.ChipsInPenny
	}
	return false
}

func (x *Game) GetPairMixedAddonPlayers() *anypb.Any {
	if x != nil {
		return x.PairMixedAddonPlayers
	}
	return nil
}

func (x *Game) GetHardCapEnabled() bool {
	if x != nil {
		return x.HardCapEnabled
	}
	return false
}

func (x *Game) GetUsernamePrivacy() bool {
	if x != nil {
		return x.UsernamePrivacy
	}
	return false
}

func (x *Game) GetRevealCardsAfterAction() bool {
	if x != nil {
		return x.RevealCardsAfterAction
	}
	return false
}

func (x *Game) GetCardsRound() int32 {
	if x != nil {
		return x.CardsRound
	}
	return 0
}

func (x *Game) GetBringIn() bool {
	if x != nil {
		return x.BringIn
	}
	return false
}

func (x *Game) GetBringInValue() float32 {
	if x != nil {
		return x.BringInValue
	}
	return 0
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Username        string     `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Chair           int32      `protobuf:"varint,3,opt,name=chair,proto3" json:"chair,omitempty"`
	Thumb           *anypb.Any `protobuf:"bytes,4,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Status          string     `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Chips           float32    `protobuf:"fixed32,6,opt,name=chips,proto3" json:"chips,omitempty"`
	CanAddon        bool       `protobuf:"varint,7,opt,name=can_addon,json=canAddon,proto3" json:"can_addon,omitempty"`
	CanRaise        bool       `protobuf:"varint,8,opt,name=can_raise,json=canRaise,proto3" json:"can_raise,omitempty"`
	Latency         int64      `protobuf:"varint,9,opt,name=latency,proto3" json:"latency,omitempty"`
	IsCelebrity     bool       `protobuf:"varint,10,opt,name=is_celebrity,json=isCelebrity,proto3" json:"is_celebrity,omitempty"`
	Bet2Do          float32    `protobuf:"fixed32,11,opt,name=bet2do,proto3" json:"bet2do,omitempty"`
	UserId          int64      `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Md5             string     `protobuf:"bytes,13,opt,name=md5,proto3" json:"md5,omitempty"`
	Action          string     `protobuf:"bytes,14,opt,name=action,proto3" json:"action,omitempty"`
	Score           int64      `protobuf:"varint,15,opt,name=score,proto3" json:"score,omitempty"`
	IsDealer        bool       `protobuf:"varint,16,opt,name=is_dealer,json=isDealer,proto3" json:"is_dealer,omitempty"`
	IsMyturn        bool       `protobuf:"varint,17,opt,name=is_myturn,json=isMyturn,proto3" json:"is_myturn,omitempty"`
	MyturnStartTime int64      `protobuf:"varint,18,opt,name=myturn_start_time,json=myturnStartTime,proto3" json:"myturn_start_time,omitempty"`
	Cards           *anypb.Any `protobuf:"bytes,19,opt,name=cards,proto3" json:"cards,omitempty"`
	IsAllin         bool       `protobuf:"varint,20,opt,name=is_allin,json=isAllin,proto3" json:"is_allin,omitempty"`
	IsAway          bool       `protobuf:"varint,21,opt,name=is_away,json=isAway,proto3" json:"is_away,omitempty"`
	// fields from extended implementation
	CanDraw                 bool       `protobuf:"varint,22,opt,name=can_draw,json=canDraw,proto3" json:"can_draw,omitempty"`
	ShouldShowPrizeRevealer bool       `protobuf:"varint,23,opt,name=should_show_prize_revealer,json=shouldShowPrizeRevealer,proto3" json:"should_show_prize_revealer,omitempty"`
	HandDescription         *anypb.Any `protobuf:"bytes,24,opt,name=hand_description,json=handDescription,proto3" json:"hand_description,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_services_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_services_services_proto_rawDescGZIP(), []int{6}
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Player) GetChair() int32 {
	if x != nil {
		return x.Chair
	}
	return 0
}

func (x *Player) GetThumb() *anypb.Any {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *Player) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Player) GetChips() float32 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *Player) GetCanAddon() bool {
	if x != nil {
		return x.CanAddon
	}
	return false
}

func (x *Player) GetCanRaise() bool {
	if x != nil {
		return x.CanRaise
	}
	return false
}

func (x *Player) GetLatency() int64 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *Player) GetIsCelebrity() bool {
	if x != nil {
		return x.IsCelebrity
	}
	return false
}

func (x *Player) GetBet2Do() float32 {
	if x != nil {
		return x.Bet2Do
	}
	return 0
}

func (x *Player) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Player) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *Player) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Player) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Player) GetIsDealer() bool {
	if x != nil {
		return x.IsDealer
	}
	return false
}

func (x *Player) GetIsMyturn() bool {
	if x != nil {
		return x.IsMyturn
	}
	return false
}

func (x *Player) GetMyturnStartTime() int64 {
	if x != nil {
		return x.MyturnStartTime
	}
	return 0
}

func (x *Player) GetCards() *anypb.Any {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Player) GetIsAllin() bool {
	if x != nil {
		return x.IsAllin
	}
	return false
}

func (x *Player) GetIsAway() bool {
	if x != nil {
		return x.IsAway
	}
	return false
}

func (x *Player) GetCanDraw() bool {
	if x != nil {
		return x.CanDraw
	}
	return false
}

func (x *Player) GetShouldShowPrizeRevealer() bool {
	if x != nil {
		return x.ShouldShowPrizeRevealer
	}
	return false
}

func (x *Player) GetHandDescription() *anypb.Any {
	if x != nil {
		return x.HandDescription
	}
	return nil
}

type TableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMeta *GameMeta `protobuf:"bytes,1,opt,name=game_meta,json=gameMeta,proto3" json:"game_meta,omitempty"`
	Game     *Game     `protobuf:"bytes,2,opt,name=game,proto3" json:"game,omitempty"`
	Players  []*Player `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *TableState) Reset() {
	*x = TableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableState) ProtoMessage() {}

func (x *TableState) ProtoReflect() protoreflect.Message {
	mi := &file_services_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableState.ProtoReflect.Descriptor instead.
func (*TableState) Descriptor() ([]byte, []int) {
	return file_services_services_proto_rawDescGZIP(), []int{7}
}

func (x *TableState) GetGameMeta() *GameMeta {
	if x != nil {
		return x.GameMeta
	}
	return nil
}

func (x *TableState) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *TableState) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

var File_services_services_proto protoreflect.FileDescriptor

var file_services_services_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x11, 0x55,
	0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x42, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x55, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x12, 0x55, 0x69, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x38, 0x0a, 0x0a, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb,
	0x0d, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x48, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x52, 0x61, 0x69, 0x73, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x53, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x6c, 0x61, 0x73,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x68, 0x61, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x16, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x13, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x17, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x14, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x1c, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b,
	0x0a, 0x1a, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x44, 0x65,
	0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x77,
	0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x77, 0x69, 0x6c, 0x64,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x6e, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x50, 0x65, 0x6e, 0x6e, 0x79, 0x12, 0x4d, 0x0a, 0x18, 0x70,
	0x61, 0x69, 0x72, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x15, 0x70, 0x61, 0x69, 0x72, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x43, 0x61, 0x70, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12,
	0x39, 0x0a, 0x19, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x62, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc2, 0x11, 0x0a,
	0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x6b, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x23,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x4d, 0x61, 0x6b, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x61, 0x69,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x67, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x69, 0x67, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x74, 0x75,
	0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x03, 0x70, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x03, 0x70, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x62, 0x65, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x62, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x62, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x62, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x62, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x73, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x49, 0x0a,
	0x16, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x13, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x17, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x14, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x1c, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x1f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x12, 0x4f, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x64, 0x65, 0x54,
	0x6f, 0x12, 0x48, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x6e, 0x72, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x6e, 0x72, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14,
	0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x69, 0x7a,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0e, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x6e, 0x79, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x50, 0x65, 0x6e, 0x6e, 0x79,
	0x12, 0x4d, 0x0a, 0x18, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x15, 0x70, 0x61, 0x69, 0x72, 0x4d, 0x69,
	0x78, 0x65, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x43,
	0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x62, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xef, 0x05, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x32, 0x64, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x65, 0x74, 0x32, 0x64, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x79, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x79, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x79, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x79, 0x74, 0x75, 0x72,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x69,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x41, 0x77, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61,
	0x6e, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61,
	0x6e, 0x44, 0x72, 0x61, 0x77, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x32, 0x42, 0x0a, 0x03, 0x53, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x09, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2e, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_services_proto_rawDescOnce sync.Once
	file_services_services_proto_rawDescData = file_services_services_proto_rawDesc
)

func file_services_services_proto_rawDescGZIP() []byte {
	file_services_services_proto_rawDescOnce.Do(func() {
		file_services_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_services_proto_rawDescData)
	})
	return file_services_services_proto_rawDescData
}

var file_services_services_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_services_services_proto_goTypes = []interface{}{
	(*UiSettingsRequest)(nil),    // 0: services.UiSettingsRequest
	(*AllUiSettingsRequest)(nil), // 1: services.AllUiSettingsRequest
	(*UiSettingsResponse)(nil),   // 2: services.UiSettingsResponse
	(*BlindLevel)(nil),           // 3: services.BlindLevel
	(*GameMeta)(nil),             // 4: services.GameMeta
	(*Game)(nil),                 // 5: services.Game
	(*Player)(nil),               // 6: services.Player
	(*TableState)(nil),           // 7: services.TableState
	(*anypb.Any)(nil),            // 8: google.protobuf.Any
	(*emptypb.Empty)(nil),        // 9: google.protobuf.Empty
}
var file_services_services_proto_depIdxs = []int32{
	3,  // 0: services.GameMeta.blind_level_and_values:type_name -> services.BlindLevel
	8,  // 1: services.GameMeta.flash_prize_pool_values:type_name -> google.protobuf.Any
	8,  // 2: services.GameMeta.additional_prize_pool_payout:type_name -> google.protobuf.Any
	8,  // 3: services.GameMeta.unique_deck:type_name -> google.protobuf.Any
	8,  // 4: services.GameMeta.instant_payout:type_name -> google.protobuf.Any
	8,  // 5: services.GameMeta.wildcard_value:type_name -> google.protobuf.Any
	8,  // 6: services.GameMeta.pair_mixed_addon_players:type_name -> google.protobuf.Any
	8,  // 7: services.Game.flop:type_name -> google.protobuf.Any
	8,  // 8: services.Game.turn:type_name -> google.protobuf.Any
	8,  // 9: services.Game.river:type_name -> google.protobuf.Any
	8,  // 10: services.Game.winners_dta:type_name -> google.protobuf.Any
	8,  // 11: services.Game.pot:type_name -> google.protobuf.Any
	8,  // 12: services.Game.bet:type_name -> google.protobuf.Any
	3,  // 13: services.Game.blind_level_and_values:type_name -> services.BlindLevel
	8,  // 14: services.Game.flash_prize_pool_values:type_name -> google.protobuf.Any
	8,  // 15: services.Game.additional_prize_pool_payout:type_name -> google.protobuf.Any
	8,  // 16: services.Game.additional_payout_hand:type_name -> google.protobuf.Any
	8,  // 17: services.Game.additional_payout_made_to:type_name -> google.protobuf.Any
	8,  // 18: services.Game.tounrament_batch_info:type_name -> google.protobuf.Any
	8,  // 19: services.Game.unique_deck:type_name -> google.protobuf.Any
	8,  // 20: services.Game.instant_payout:type_name -> google.protobuf.Any
	8,  // 21: services.Game.wildcard_value:type_name -> google.protobuf.Any
	8,  // 22: services.Game.pair_mixed_addon_players:type_name -> google.protobuf.Any
	8,  // 23: services.Player.thumb:type_name -> google.protobuf.Any
	8,  // 24: services.Player.cards:type_name -> google.protobuf.Any
	8,  // 25: services.Player.hand_description:type_name -> google.protobuf.Any
	4,  // 26: services.TableState.game_meta:type_name -> services.GameMeta
	5,  // 27: services.TableState.game:type_name -> services.Game
	6,  // 28: services.TableState.players:type_name -> services.Player
	9,  // 29: services.Sng.getStatus:input_type -> google.protobuf.Empty
	7,  // 30: services.Sng.getStatus:output_type -> services.TableState
	30, // [30:31] is the sub-list for method output_type
	29, // [29:30] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_services_services_proto_init() }
func file_services_services_proto_init() {
	if File_services_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUiSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UiSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlindLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_services_proto_goTypes,
		DependencyIndexes: file_services_services_proto_depIdxs,
		MessageInfos:      file_services_services_proto_msgTypes,
	}.Build()
	File_services_services_proto = out.File
	file_services_services_proto_rawDesc = nil
	file_services_services_proto_goTypes = nil
	file_services_services_proto_depIdxs = nil
}
